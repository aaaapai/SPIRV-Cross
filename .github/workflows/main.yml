# Copyright 2020-2021 The Khronos Group, Inc.
# SPDX-License-Identifier: Apache-2.0

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: "Build ${{ matrix.platform }}"
    strategy:
      matrix:
        platform: [ubuntu-latest]
    env:
      PARALLEL: -j 2

    runs-on: "${{ matrix.platform }}"
    steps:
      - uses: actions/checkout@main

      - name: Cache glslang / SPIRV-Tools
        id: cache-externals
        uses: actions/cache@main
        with:
          path: external/*-build/output
          key: ${{ matrix.platform }} externals ${{ hashFiles('checkout_glslang_spirv_tools.sh', 'build_glslang_spirv_tools.sh') }}

      - name: Pull glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./checkout_glslang_spirv_tools.sh

      - name: Build glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./build_glslang_spirv_tools.sh Release 4

      - name: Configure SPIRV-Cross
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. -DSPIRV_CROSS_MISC_WARNINGS=ON -DSPIRV_CROSS_SHARED=ON -DCMAKE_INSTALL_PREFIX=output -DCMAKE_BUILD_TYPE=Release -DSPIRV_CROSS_ENABLE_TESTS=ON

      - name: Build SPIRV-Cross
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          cmake --build . --config Release --parallel 4
          cmake --build . --config Release --target install

      - uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.platform }}-binaries
          path: build/output

      - name: Test SPIRV-Cross
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: ctest --verbose -C Release

  build-mobile:
    needs: build
    name: "Build ${{ matrix.sdk }}"
    strategy:
      matrix:
        include:
          - platform: android
            sdk: android
            architectures: arm64-v8a
    env:
      PARALLEL: -j 2

    runs-on: ubuntu-latest  # Use only Ubuntu for Android build
    steps:
      - uses: actions/checkout@main

      - name: Cache glslang / SPIRV-Tools
        id: cache-externals
        uses: actions/cache@main
        with:
          path: external/*-build/output
          key: ${{ matrix.platform }} externals ${{ hashFiles('checkout_glslang_spirv_tools.sh', 'build_glslang_spirv_tools.sh') }}

      - name: Pull glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./checkout_glslang_spirv_tools.sh

      - name: Build glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./build_glslang_spirv_tools.sh Release 4

      - name: Configure SPIRV-Cross for Android ARM64
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. -DSPIRV_CROSS_MISC_WARNINGS=ON -DSPIRV_CROSS_SHARED=ON -DCMAKE_INSTALL_PREFIX=output -DCMAKE_BUILD_TYPE=Release -DSPIRV_CROSS_ENABLE_TESTS=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-24 -DANDROID_LD=lld

      - name: Build SPIRV-Cross for Android ARM64
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          cmake --build . --config Release --parallel 4
          cmake --build . --config Release --target install

      - uses: actions/upload-artifact@main
        with:
          name: android-arm64-binaries
          path: build/output

      - name: Test SPIRV-Cross for Android ARM64
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: ctest --verbose -C Release

  reuse:
    name: "REUSE license check"
    runs-on: ubuntu-latest
    container: khronosgroup/docker-images:asciidoctor-spec

    steps:
      - uses: actions/checkout@main

      # REUSE license checker
      - name: license-check
        run: |
          reuse lint
