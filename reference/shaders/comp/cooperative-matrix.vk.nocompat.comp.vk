#version 450
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 6) const int Scope = 3;
layout(constant_id = 0) const int Rows = 16;
layout(constant_id = 1) const int Columns = 16;
layout(constant_id = 5) const int Layout = 0;

layout(set = 0, binding = 0, std430) buffer SSBO32
{
    float data[];
} ssbo32;

layout(set = 0, binding = 0, std430) buffer SSBO16
{
    float16_t data[];
} ssbo16;

shared uint blah[512];

void loads_32()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _73;
    coopMatLoad(_73, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _73;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A32 = tempArg;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _92;
    coopMatLoad(_92, ssbo16.data, 512u * gl_WorkGroupID.x, 32u, gl_CooperativeMatrixLayoutRowMajor);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> tempArg_1 = _92;
    A32 = tempArg_1;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _106;
    coopMatLoad(_106, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> tempArg_2 = _106;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> B32 = tempArg_2;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _117;
    coopMatLoad(_117, ssbo16.data, 512u * gl_WorkGroupID.x, 32u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> tempArg_3 = _117;
    B32 = tempArg_3;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _130;
    coopMatLoad(_130, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_4 = _130;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> C32 = tempArg_4;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _141;
    coopMatLoad(_141, ssbo16.data, 512u * gl_WorkGroupID.x, 32u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_5 = _141;
    C32 = tempArg_5;
}

void loads_16()
{
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> _155;
    coopMatLoad(_155, ssbo32.data, 128u * gl_WorkGroupID.x, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _155;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> A16 = tempArg;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> _166;
    coopMatLoad(_166, ssbo16.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> tempArg_1 = _166;
    A16 = tempArg_1;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> _178;
    coopMatLoad(_178, ssbo32.data, 128u * gl_WorkGroupID.x, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> tempArg_2 = _178;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> B16 = tempArg_2;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> _189;
    coopMatLoad(_189, ssbo16.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> tempArg_3 = _189;
    B16 = tempArg_3;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> _201;
    coopMatLoad(_201, ssbo32.data, 128u * gl_WorkGroupID.x, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_4 = _201;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> C16 = tempArg_4;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> _212;
    coopMatLoad(_212, ssbo16.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_5 = _212;
    C16 = tempArg_5;
}

void stores()
{
    coopMatStore(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, gl_CooperativeMatrixLayoutColumnMajor);
    coopMatStore(coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(100u), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, gl_CooperativeMatrixLayoutRowMajor);
    coopMatStore(coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(-100), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, int(Layout));
    coopMatStore(coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA>(float16_t(100.0)), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, int(Layout));
    coopMatStore(coopmat<int16_t, Scope, Rows, Columns, gl_MatrixUseA>(-100s), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, int(Layout));
    coopMatStore(coopmat<uint16_t, Scope, Rows, Columns, gl_MatrixUseA>(100us), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, int(Layout));
}

void len()
{
    int len_1 = int(uint(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(0).length()));
    len_1 = int(uint(coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB>(0).length()));
    len_1 = int(uint(coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator>(0).length()));
    len_1 = int(uint(coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(0).length()));
    len_1 = int(uint(coopmat<int16_t, Scope, Rows, Columns, gl_MatrixUseB>(0).length()));
    len_1 = int(uint(coopmat<uint16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator>(0).length()));
}

void conversions()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0);
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> A2 = coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(100u);
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> B = coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(A);
    B = coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(A2);
}

void elementwise()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0);
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> B = coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(100);
    A += A;
    A -= A;
    A *= A;
    A /= A;
    A *= 100.0;
    B += B;
    B -= B;
    B *= B;
    B /= B;
    B *= 100;
}

void insert_extract()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0);
    for (int i = 0; i < int(uint(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(0).length())); i++)
    {
        A[i] += 50.0;
    }
    coopMatStore(A, ssbo32.data, 0u, 16u, int(Layout));
}

void scalar_construct()
{
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> A = coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(gl_WorkGroupID.x);
    coopMatStore(A, ssbo32.data, 0u, 16u, int(Layout));
}

coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> coopmat_square(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> a)
{
    return a * a;
}

void matmul()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> param = A;
    A = coopmat_square(param);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _286;
    coopMatLoad(_286, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _286;
    A = tempArg;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _296;
    coopMatLoad(_296, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> tempArg_1 = _296;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> B = tempArg_1;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _307;
    coopMatLoad(_307, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_2 = _307;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> C = tempArg_2;
    C = coopMatMulAdd(A, B, C, 0);
    C = coopMatMulAdd(A, B, C, 0);
    C = coopMatMulAdd(A, B, C, 16);
}

void matmul_uint()
{
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> _332;
    coopMatLoad(_332, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _332;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> A = tempArg;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseB> _345;
    coopMatLoad(_345, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseB> tempArg_1 = _345;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseB> B = tempArg_1;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseAccumulator> _358;
    coopMatLoad(_358, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_2 = _358;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseAccumulator> C = tempArg_2;
    C = coopMatMulAdd(A, B, C, 31);
}

void matmul_int()
{
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> _375;
    coopMatLoad(_375, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _375;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> A = tempArg;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseB> _388;
    coopMatLoad(_388, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseB> tempArg_1 = _388;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseB> B = tempArg_1;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator> _401;
    coopMatLoad(_401, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_2 = _401;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator> C = tempArg_2;
    C = coopMatMulAdd(A, B, C, 31);
}

void lds()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _498;
    coopMatLoad(_498, blah, 0u, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _498;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = tempArg;
    coopMatStore(A, blah, 0u, 16u, int(Layout));
}

void array_of_coopmat()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> As[4];
    for (int i = 0; i < 4; i++)
    {
        As[i] = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(float(i));
    }
}

void types()
{
    coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> A = coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA>(0.0);
    coopmat<float, gl_ScopeWorkgroup, 16u, 16u, gl_MatrixUseA> B = coopmat<float, gl_ScopeWorkgroup, 16u, 16u, gl_MatrixUseA>(0.0);
}

void main()
{
    loads_32();
    loads_16();
    stores();
    len();
    conversions();
    elementwise();
    insert_extract();
    scalar_construct();
    matmul();
    matmul_uint();
    matmul_int();
    lds();
    array_of_coopmat();
    types();
}

