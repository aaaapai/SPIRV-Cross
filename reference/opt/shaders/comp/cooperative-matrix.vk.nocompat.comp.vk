#version 450
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 6) const int Scope = 3;
layout(constant_id = 0) const int Rows = 16;
layout(constant_id = 1) const int Columns = 16;
layout(constant_id = 5) const int Layout = 0;

layout(set = 0, binding = 0, std430) buffer SSBO32
{
    float data[];
} ssbo32;

layout(set = 0, binding = 0, std430) buffer SSBO16
{
    float16_t data[];
} ssbo16;

shared uint blah[512];

void main()
{
    uint _562 = 256u * gl_WorkGroupID.x;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _567;
    coopMatLoad(_567, ssbo32.data, _562, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    uint _571 = 512u * gl_WorkGroupID.x;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _576;
    coopMatLoad(_576, ssbo16.data, _571, 32u, gl_CooperativeMatrixLayoutRowMajor);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _585;
    coopMatLoad(_585, ssbo32.data, _562, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _594;
    coopMatLoad(_594, ssbo16.data, _571, 32u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _603;
    coopMatLoad(_603, ssbo32.data, _562, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _612;
    coopMatLoad(_612, ssbo16.data, _571, 32u, int(Layout));
    uint _626 = 128u * gl_WorkGroupID.x;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> _631;
    coopMatLoad(_631, ssbo32.data, _626, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> _640;
    coopMatLoad(_640, ssbo16.data, _562, 16u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> _649;
    coopMatLoad(_649, ssbo32.data, _626, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> _658;
    coopMatLoad(_658, ssbo16.data, _562, 16u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> _667;
    coopMatLoad(_667, ssbo32.data, _626, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> _676;
    coopMatLoad(_676, ssbo16.data, _562, 16u, int(Layout));
    coopMatStore(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0), ssbo32.data, _626, 0u, gl_CooperativeMatrixLayoutColumnMajor);
    coopMatStore(coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(100u), ssbo32.data, _626, 0u, gl_CooperativeMatrixLayoutRowMajor);
    coopMatStore(coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(-100), ssbo32.data, _626, 0u, int(Layout));
    coopMatStore(coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA>(float16_t(100.0)), ssbo32.data, _626, 0u, int(Layout));
    coopMatStore(coopmat<int16_t, Scope, Rows, Columns, gl_MatrixUseA>(-100s), ssbo32.data, _626, 0u, int(Layout));
    coopMatStore(coopmat<uint16_t, Scope, Rows, Columns, gl_MatrixUseA>(100us), ssbo32.data, _626, 0u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _774 = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0);
    for (int _960 = 0; _960 < int(uint(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(0).length())); )
    {
        _774[_960] += 50.0;
        _960++;
        continue;
    }
    coopMatStore(_774, ssbo32.data, 0u, 16u, int(Layout));
    coopMatStore(coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(gl_WorkGroupID.x), ssbo32.data, 0u, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _819;
    coopMatLoad(_819, ssbo32.data, _562, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _828;
    coopMatLoad(_828, ssbo32.data, _562, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _837;
    coopMatLoad(_837, ssbo32.data, _562, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> _870;
    coopMatLoad(_870, ssbo32.data, _562, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseB> _879;
    coopMatLoad(_879, ssbo32.data, _562, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseAccumulator> _888;
    coopMatLoad(_888, ssbo32.data, _562, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> _908;
    coopMatLoad(_908, ssbo32.data, _562, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseB> _917;
    coopMatLoad(_917, ssbo32.data, _562, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator> _926;
    coopMatLoad(_926, ssbo32.data, _562, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _936;
    coopMatLoad(_936, blah, 0u, 16u, int(Layout));
    coopMatStore(_936, blah, 0u, 16u, int(Layout));
}

